# -*- coding: utf-8 -*-
"""prorama-tutorias.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18hAuwE0LHRIerM6zwcQl9qNkNfQpFUHQ
"""

#1. Diseño de Experimento
#Explica brevemente cómo se podría mejorar el diseño del experimento para reducir posibles sesgos.

#Pregunta de investigación: ¿Es efectivo el nuevo programa de tutorías?
#Hipotesis: El nuevo programa de tutorias mejora el rendimiento acádemico.
#Variables independientes: Estudiantes (Grupo Tutoría, Grupo control)
#Variable dependiente: Calificaciones

#Para reducir sesgos y errores, tenemos que asegurarnos que la muestra de estudiantes
#cumple con caracteristicas similares para evitar que las variables que no estamos investigando afecten los resultados.
#Esto quiere decir que los estudiantes deben tener el mismo acceso a recursos (tiempo, libros, espacio de estudio, etc.).


#Además, la selección de los estudiantes en cada grupo debe ser de manera aleatoria, y también es importante tener un
#registro de las calificaciones de los estudiantes antes de recibir las tutorías.
#(Esto último para verificar el impacto de las tutorias en el grupo que las va a recibir.)


#2. Cálculo de Estadísticas Descriptivas (3 puntos)

import pandas as pd
from scipy.stats import pearsonr
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from scipy.stats import norm, ttest_1samp, t, ttest_ind

datos={
    'Grupo_tutoria': [85, 90, 78, 88, 92, 80, 86, 89, 84, 87, 91, 82, 83, 85, 88],
    'Grupo_control': [70, 72, 75, 78, 80, 68, 74, 76, 79, 77, 73, 71, 75, 78, 80]
}

df=pd.DataFrame(datos)

#•Calcula la media y la desviación estándar para ambos grupos.
media_tutoria=df['Grupo_tutoria'].mean()
media_control=df['Grupo_control'].mean()
print(f"Media de calificaciones del grupo con tutoria es: {media_tutoria:.3f}")
print(f"Media de calificaciones del grupo control es: {media_control:.3f}")

desv_tutoria=df['Grupo_tutoria'].std()
desv_control=df['Grupo_control'].std()
print(f"Desviacion estandar de calificaciones del grupo con tutoria es: {desv_tutoria:.3f}")
print(f"Desviacion estandar de calificaciones del grupo con tutoria es: {desv_control:.3f}")

#
#•Representa los datos gráficamente (usando histogramas o diagramas de caja).
plt.hist(df['Grupo_tutoria'], bins=5, alpha=0.5, color='blue', edgecolor='black', label='Grupo con tutoria', density=True)
plt.hist(df['Grupo_control'], bins=5, alpha=0.5, label='Grupo control', color="red", edgecolor="black", density=True)
plt.xlabel('Calificaciones')
plt.ylabel('frecuencia')
plt.title('Histograma de Calificaciones')
plt.legend()
plt.show()

sns.boxplot(data=[df['Grupo_tutoria'], df['Grupo_control']], palette=['blue', 'red'])
plt.xlabel('grupo')
plt.ylabel('calificaciones')
plt.title('boxplot de calificaciones')
plt.legend()
plt.show()


#Visualmente podemos apreciar una clara diferencia entre los resultados obtenidos
#por ambos grupos, el grupo que recibió tutorías obtuvo mejores resultados que el grupo de control.

#3. Prueba de Hipótesis (4 puntos)
#•Plantea la hipótesis nula (H0) y alternativa (H1).
print("H0: No hay diferencia en el rendimiento académico entre los dos grupos.")
print("H1: El grupo con tutoría tiene un mejor rendimiento académico.")
#•Realiza una prueba t para comparar las medias de ambos grupos. Usa un nivel de significancia (α=0.05).
#•Interpreta el valor-p y decide si rechazas o no la hipótesis nula.
mu_control=media_control
mu_tutoria=media_tutoria
t_stat, p_valor=ttest_ind(df['Grupo_tutoria'], df['Grupo_control'])
print(f"Estadistico t: {t_stat:.3f}")
print(f"valor p: {p_valor:.4f}")

if p_valor < 0.05:
  print("Rechazamos la hipotesis nula (el grupo con tutoria tiene un mejor rendimiento academico)")
else:
  print("No rechazamos la hipotesis nula (no hay diferencia entre los dos grupos)")

#TLC
#Decidí incluir el Teorema del Limite Central para validar el uso de T Student, dado que
#la distribución normal de las medias muestrales es una condición importante para la validez
poblacion = (df['Grupo_tutoria']) + (df['Grupo_control'])
n_simulaciones = 1000
tam_muestra = 15
medias_muestrales = []

for x in range(n_simulaciones):
    muestra = np.random.choice(poblacion, size=tam_muestra, replace=True)
    medias_muestrales.append(np.mean(muestra))

# Grafico de la distribución de las medias muestrales
plt.figure(figsize=(8,4))
sns.histplot(medias_muestrales, kde=True, bins=30, color='skyblue')
plt.title('Distribución de medias muestrales (Teorema del Límite Central)')
plt.xlabel('Media de muestra')
plt.ylabel('Frecuencia')
plt.show()
#4.Intervalo de Confianza (2 puntos)
#•Calcula un intervalo de confianza del 95% para la diferencia de medias entre los dos grupos.
#•Interpreta el resultado.

tam_tutoria = len(df['Grupo_tutoria'])
tam_control = len(df['Grupo_control'])
tam_muestral= tam_tutoria + tam_control
lvl_confianza = 0.95
grado_libertad = tam_muestral - 2

# Diferencia de medias
dif_medias = media_tutoria - media_control

# Error estándar de la diferencia
error_std_dif = np.sqrt((desv_tutoria**2 / tam_tutoria) + (desv_control**2 / tam_control))

#t critico
t_critico = t.ppf(1-(1-lvl_confianza)/2, df = grado_libertad)

#margen de error
margen_error = t_critico * error_std_dif

# Intervalo de confianza
limite_inf = dif_medias - margen_error
limite_sup = dif_medias + margen_error

print(f"Intervalo de confianza del 95% para la diferencia de medias: ({limite_inf:.2f}, {limite_sup:.2f})")

# Interpretación
if limite_inf > 0:
    print("Interpretación: El intervalo está completamente por encima de 0, esto indica que el grupo con tutoría tiene un rendimiento académico significativamente mayor.")
elif limite_sup < 0:
    print("Interpretación: El intervalo está completamente por debajo de 0, indica que el grupo control tiene un mejor rendimiento.")
else:
    print("Interpretación: El intervalo incluye el 0, por lo tanto no se puede afirmar con confianza que haya una diferencia significativa entre los grupos.")

