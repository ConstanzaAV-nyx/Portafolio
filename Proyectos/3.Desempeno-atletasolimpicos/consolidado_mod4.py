# -*- coding: utf-8 -*-
"""Consolidado_Mod4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mT4JIuaj7ZkGu1e3B69XUJZg0_ufchHs
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score


# URL del archivo raw de GitHub
url = "https://raw.githubusercontent.com/Aconstanza/Portafolio/refs/heads/main/olimpicos.csv"


df = pd.read_csv(url)

#Inspección inicial
print("Primeras filas del dataset:")
print(df.head(), "\n")
print("Información del dataset:")
print(df.info(), "\n")

#IDENT. DE PROBLEMAS
print("Valores faltantes por columna: ")
print(df.isnull().sum(), "\n")
df_cleaned = df.dropna()
#duplicados
print("Duplicados en el dataset: ")
print(df.duplicated().sum(), "\n")
df_cleaned = df_cleaned.drop_duplicates()
#Estadisticas descriptivas:
print("Estadisticas descriptivas:")
print(df.describe(), "\n")

print(df_cleaned)
#Histograma del numero de Entrenamientos semanales:
print("Histograma con Seaborn")
sns.histplot(df['Entrenamientos_Semanales'], bins=10, kde=True, color="pink")
plt.title("Histograma del numero de Entrenamiento Semanales")
plt.show()

print("Histograma con Matplotlib")
plt.hist(df['Entrenamientos_Semanales'], edgecolor="black", color="purple")
plt.title("Histograma del numero de Entrenamiento Semanales")
plt.show()

#Estadistica descriptiva
print("-----------------------------------------------------")
print("2. Estadisticas descriptivas:")
#tipos de datos:
print("Tipos de datos:")
print(df.dtypes, "\n")
# identificar el tipo de variable
tipos_datos = {
    "Nombre": "Categórica",
    "Edad": "Numérica_Discreta",
    "Altura_cm": "Numérica_Continua",
    "Peso_kg": "Numérica_Continua",
    "Entrenamientos_Semanales": "Numérica_Discreta",
    "Pais": "Categórica",
    "Deporte": "Categórica",
    "Medallas_Totales": "Numérica_Discreta"
}
tabla_datos = pd.DataFrame(list(tipos_datos.items()), columns=["Variable", "Tipología"])
print(tabla_datos)


#Calcula la media, mediana y moda de la cantidad de medallas obtenidas.
print("Media de la cantidad de medallas obtenidas:", df['Medallas_Totales'].mean())
print("Mediana de la cantidad de medallas obtenidas:", df['Medallas_Totales'].median())
print("Moda de la cantidad de medallas obtenidas:", df['Medallas_Totales'].mode())

#Calcula la desviación estándar de la altura de los atletas.
print("Desviación estándar de la altura de los atletas:", df['Altura_cm'].std())

#Identifica valores atípicos en la columna de peso utilizando un boxplot.
sns.boxplot(x=df["Peso_kg"], color="lightgreen")
plt.title("Boxplot de Peso de atletas")
plt.show()
print("No hay valores outliers")

#Análisis de Correlación
print("-----------------------------------------------------")
print("3. Análisis de Correlación:")

#Calcula la correlación de Pearson entre entrenamientos semanales y medallas totales.

tab_cont= pd.crosstab(df["Entrenamientos_Semanales"], df["Medallas_Totales"])
print(tab_cont)

plt.figure(figsize=(8, 5))
plt.scatter(df["Entrenamientos_Semanales"], df["Medallas_Totales"], color="Blue")
plt.xlabel("Entrenamientos Semanales")
plt.ylabel("Medallas Totales")
plt.title("Relación entre Entrenamientos Semanales y Medallas Totales")
plt.grid(True)
plt.show()

coef, p_valor = stats.pearsonr(df["Entrenamientos_Semanales"], df["Medallas_Totales"])
print(f"Coeficiente de Correlación de Pearson: {coef:.2f}")
print(f"P-Valor: {p_valor:.3f}")
if abs(coef) > 0.7:
  correlacion = "fuerte"
elif abs(coef) > 0.4:
    correlacion = "moderada"
else:
    correlacion = "débil"
print(f"Para un Coeficiente de correlación de: {coef:.2f}, hay una correlación {correlacion}.")

if p_valor < 0.05:
    print("Existe evidencia estadística para rechazar la hipótesis nula.")
else:
    print("No hay evidencia suficiente para rechazar la hipótesis nula.")


#Crea un gráfico de dispersión (scatterplot) entre peso y medallas totales con Seaborn
sns.scatterplot(x=df["Peso_kg"], y=df["Medallas_Totales"], color="blue")
plt.xlabel("Peso (kg) de atletas")
plt.ylabel("Medallas Totales")
plt.title("Relación entre Peso y Medallas Totales")
plt.grid(True)
plt.show()

coef, p_valor = stats.pearsonr(df["Peso_kg"], df["Medallas_Totales"])
print(f"Coeficiente de Correlación de Pearson: {coef:.2f}")
print(f"P-Valor: {p_valor:.3f}")
if abs(coef) > 0.7:
  correlacion = "fuerte"
elif abs(coef) > 0.4:
    correlacion = "moderada"
else:
    correlacion = "débil"
print(f"Para un Coeficiente de correlación de: {coef:.2f}, hay una correlación {correlacion}.")

if p_valor < 0.05:
    print("Existe evidencia estadística para rechazar la hipótesis nula.")
else:
    print("No hay evidencia suficiente para rechazar la hipótesis nula.")

print("No hay evidencia suficiente para indicar que el peso o la cantidad de entrenamientos semanales influyan en la cantidad de medallas obtenidas")

print("-----------------------------------------------------")
#4. Regresión Lineal
print("4. Regresión Lineal")

# Implementa un modelo de regresión lineal para predecir el número de medallas obtenidas en función del número de entrenamientos semanales.
print("Modelo predictivo de numero de medallas obtenidas en función del número de entrenamientos semanales")
X = df[["Entrenamientos_Semanales"]]
Y = df["Medallas_Totales"]

modelo = LinearRegression()
modelo.fit(X, Y)

# Obtén los coeficientes de regresión e interpreta el resultado.
print("Coeficientes de regresión del modelo")
beta_0= modelo.intercept_
beta_1= modelo.coef_[0]

Y_pred=modelo.predict(X)

print(f"Intercepto (beta_0): {beta_0}")
print(f"Intercepto (beta_1): {beta_1}")

# Calcula el R² para medir el ajuste del modelo.
r2 = r2_score(Y, Y_pred)
print(f"Coeficiente de determinación R^2: {r2}")
# Usa Seaborn (regplot) para graficar la regresión lineal.
sns.regplot(x=X, y=Y, data=df, color="green")
plt.xlabel("Entrenamientos Semanales")
plt.ylabel("Medallas Totales")
plt.title("Regresión lineal entre Entrenamientos Semanales y Medallas Totales")
plt.show()

print("Existe una moderada correlación positiva")
print("-----------------------------------------------------")
#5. Visualización de Datos con Seaborn y Matplotlib
print("5. Visualización de Datos con Seaborn y Matplotlib")
#Crea un heatmap de correlación entre todas las variables numéricas.
df_num = df.select_dtypes(include=[np.number])
sns.heatmap(df_num.corr(), annot=True, cmap="flare", fmt=".2f", linewidths=0.5)
plt.title("Mapa de Calor de Correlaciones")
plt.show()
#Crea un boxplot de la cantidad de medallas por disciplina deportiva.
sns.boxplot(x="Deporte", y="Medallas_Totales", data=df, palette="pastel")
plt.xlabel("Disciplina Deportiva")
plt.ylabel("Cantidad de Medallas")
plt.title("Boxplot de la cantidad de medallas por disciplina deportiva")
plt.show()

print("La correlación positiva más fuerte es entre peso y altura de los atletas")

